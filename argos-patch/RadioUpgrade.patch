diff --git a/src/core/utility/datatypes/byte_array.cpp b/src/core/utility/datatypes/byte_array.cpp
index a73d3208..2ca13788 100644
--- a/src/core/utility/datatypes/byte_array.cpp
+++ b/src/core/utility/datatypes/byte_array.cpp
@@ -172,6 +172,15 @@ namespace argos {
    /****************************************/
    /****************************************/
 
+   size_t CByteArray::CByteArray::ReadFrom(size_t size_from, SInt8& n_value) const {
+      if(Size() < 1) THROW_ARGOSEXCEPTION("Attempting to extract too many bytes from byte array (1 requested, " << Size() << " available)");
+      n_value = m_vecBuffer[size_from];
+      return size_from + 1;
+   }
+
+   /****************************************/
+   /****************************************/
+
    CByteArray& CByteArray::operator<<(UInt16 un_value) {
       un_value = htons(un_value);
       auto* punByte = reinterpret_cast<UInt8*>(&un_value);
@@ -524,6 +533,20 @@ namespace argos {
       return *this;
    }
 
+   size_t CByteArray::ReadFrom(size_t size_from, std::string& str_value) const {
+      if(Empty()) THROW_ARGOSEXCEPTION("Attempting to extract values from empty byte array");
+      str_value.clear();
+      size_t i = size_from;
+      while(i < Size() && m_vecBuffer[i] != '\0') {
+         str_value += m_vecBuffer[i];
+         ++i;
+      }
+      if(m_vecBuffer[i] == '\0') {
+         ++i;
+      }
+      return i;
+   }
+
    /****************************************/
    /****************************************/
 
diff --git a/src/core/utility/datatypes/byte_array.h b/src/core/utility/datatypes/byte_array.h
index dfbee0b8..8e2f44f1 100644
--- a/src/core/utility/datatypes/byte_array.h
+++ b/src/core/utility/datatypes/byte_array.h
@@ -253,6 +253,14 @@ namespace argos {
        */
       CByteArray& operator>>(SInt8& n_value);
 
+      /**
+       * read a string from size_from, return the idx where the string ends.
+       * @param size_from, the idx to start the reading
+       * @param str_value the buffer for the <tt>std::string</tt>.
+       * @return the end idx of the reading.
+       */
+      size_t ReadFrom(size_t size_from, SInt8& n_value) const;
+
       /**
        * Appends a 16-bit unsigned integer to the byte array.
        * @param un_value the value of the 16-bit unsigned integer.
@@ -440,6 +448,14 @@ namespace argos {
        */
       CByteArray& operator>>(std::string& str_value);
 
+      /*
+       * read a string from size_from, return the idx where the string ends.
+       * @param size_from, the idx to start the reading
+       * @param str_value the buffer for the <tt>std::string</tt>.
+       * @return the end idx of the reading.
+       */
+      size_t ReadFrom(size_t size_from, std::string& str_value) const;
+
       /**
        * Stream operator.
        * It streams the byte array through the given stream. Useful for files, for instance.
diff --git a/src/plugins/robots/builderbot/simulator/builderbot_entity.cpp b/src/plugins/robots/builderbot/simulator/builderbot_entity.cpp
index 2de1e9fb..333a5d13 100644
--- a/src/plugins/robots/builderbot/simulator/builderbot_entity.cpp
+++ b/src/plugins/robots/builderbot/simulator/builderbot_entity.cpp
@@ -111,6 +111,8 @@ namespace argos {
          GetNodeAttributeOrDefault(t_tree, "wifi_medium", strWifiMedium, strWifiMedium);
          CRadioMedium& cWifiMedium =
             CSimulator::GetInstance().GetMedium<CRadioMedium>(strWifiMedium);
+         Real fWifiTransmissionRange = WIFI_TRANSMISSION_RANGE;
+         GetNodeAttributeOrDefault(t_tree, "wifi_transmission_range", fWifiTransmissionRange, fWifiTransmissionRange);
          std::string strNFCMedium("nfc");
          GetNodeAttributeOrDefault(t_tree, "nfc_medium", strNFCMedium, strNFCMedium);
          CRadioMedium& cNFCMedium =
@@ -120,7 +122,8 @@ namespace argos {
                                            WIFI_ANCHOR_OFFSET,
                                            sLowerBaseAnchor,
                                            cWifiMedium,
-                                           WIFI_TRANSMISSION_RANGE);
+                                           fWifiTransmissionRange,
+                                           GetId());
          m_pcRadioEquippedEntity->AddRadio("nfc",
                                            NFC_ANCHOR_OFFSET,
                                            sEndEffectorAnchor,
diff --git a/src/plugins/robots/drone/simulator/drone_entity.cpp b/src/plugins/robots/drone/simulator/drone_entity.cpp
index 7edc2c66..8f329a0a 100644
--- a/src/plugins/robots/drone/simulator/drone_entity.cpp
+++ b/src/plugins/robots/drone/simulator/drone_entity.cpp
@@ -66,9 +66,11 @@ namespace argos {
          m_pcRadioEquippedEntity = new CRadioEquippedEntity(this, "radios_0");
          std::string strWifiMedium;
          GetNodeAttributeOrDefault(t_tree, "wifi_medium", strWifiMedium, strWifiMedium);
+         Real fTransmissionRange = WIFI_TRANSMISSION_RANGE;
+         GetNodeAttributeOrDefault(t_tree, "wifi_transmission_range", fTransmissionRange, fTransmissionRange);
          if(!strWifiMedium.empty()) {
             CRadioMedium& cWifiMedium = CSimulator::GetInstance().GetMedium<CRadioMedium>(strWifiMedium);
-            m_pcRadioEquippedEntity->AddRadio("wifi", CVector3(0.0f, 0.0f, 0.1f), sOriginAnchor, cWifiMedium, WIFI_TRANSMISSION_RANGE);
+            m_pcRadioEquippedEntity->AddRadio("wifi", CVector3(0.0f, 0.0f, 0.1f), sOriginAnchor, cWifiMedium, fTransmissionRange, GetId());
             m_pcRadioEquippedEntity->Enable();
          }
          AddComponent(*m_pcRadioEquippedEntity);
diff --git a/src/plugins/robots/generic/simulator/radios_default_actuator.cpp b/src/plugins/robots/generic/simulator/radios_default_actuator.cpp
index c6e66de7..4256a83b 100644
--- a/src/plugins/robots/generic/simulator/radios_default_actuator.cpp
+++ b/src/plugins/robots/generic/simulator/radios_default_actuator.cpp
@@ -83,12 +83,24 @@ namespace argos {
    /****************************************/
    /****************************************/
 
+   std::string GetMessageTarget(const CByteArray& c_message) {
+      std::string strBuffer;
+      c_message.ReadFrom(1, strBuffer);
+      return strBuffer;
+   }
+
    bool CRadiosDefaultActuator::CSendOperation::operator()(CRadioEntity& c_recv_radio) {
       if(&c_recv_radio != &m_cRadio) {
          Real fDistance = (c_recv_radio.GetPosition() - m_cRadio.GetPosition()).Length();
          if(fDistance < m_cRadio.GetRange()) {
             for(const CByteArray& c_message : m_cMessages) {
-               c_recv_radio.ReceiveMessage(m_cRadio.GetPosition(), c_message);
+               std::string strMessageTarget = GetMessageTarget(c_message);
+               std::string strRadioRobotId = c_recv_radio.GetRobotId();
+               if ((strMessageTarget == strRadioRobotId) ||
+                   (strRadioRobotId.empty()) ||
+                   (strMessageTarget == "ALLMSG")
+                  )
+                  c_recv_radio.ReceiveMessage(m_cRadio.GetPosition(), c_message);
             }
          }
       }
diff --git a/src/plugins/simulator/entities/radio_entity.h b/src/plugins/simulator/entities/radio_entity.h
index 111acd5c..400ec1d1 100644
--- a/src/plugins/simulator/entities/radio_entity.h
+++ b/src/plugins/simulator/entities/radio_entity.h
@@ -75,7 +75,9 @@ namespace argos {
        * @see GetMessages()
        */
       inline void ReceiveMessage(const CVector3& c_origin, const CByteArray& c_message) {
+         pthread_mutex_lock(&m_tRadioEntityMessageMutex);
          m_vecMessages.emplace_back(c_origin, c_message);
+         pthread_mutex_unlock(&m_tRadioEntityMessageMutex);
       }
 
       /**
@@ -133,11 +135,22 @@ namespace argos {
        */
       void SetMedium(CRadioMedium& c_medium);
 
+      pthread_mutex_t m_tRadioEntityMessageMutex = PTHREAD_MUTEX_INITIALIZER;
+
+      inline std::string GetRobotId() const {
+         return m_strRobotId;
+      }
+
+      inline void SetRobotId(const std::string& str_robot_id) {
+         m_strRobotId = str_robot_id;
+      }
+
    protected:
 
       CRadioMedium* m_pcMedium;
       Real m_fRange;
       std::vector<std::pair<CVector3, CByteArray> > m_vecMessages;
+      std::string m_strRobotId;
 
    };
 
diff --git a/src/plugins/simulator/entities/radio_equipped_entity.cpp b/src/plugins/simulator/entities/radio_equipped_entity.cpp
index 418a8b8a..4f9e41ba 100644
--- a/src/plugins/simulator/entities/radio_equipped_entity.cpp
+++ b/src/plugins/simulator/entities/radio_equipped_entity.cpp
@@ -126,6 +126,28 @@ namespace argos {
       UpdateComponents();
    }
 
+   void CRadioEquippedEntity::AddRadio(const std::string& str_id,
+                                       const CVector3& c_offset,
+                                       SAnchor& s_anchor,
+                                       CRadioMedium& c_medium,
+                                       Real f_transmit_range,
+                                       const std::string& str_robot_id) {
+      /* create the new radio entity */
+      auto* pcRadio =
+         new CRadioEntity(this,
+                          str_id,
+                          c_medium,
+                          f_transmit_range);
+      pcRadio->SetRobotId(str_robot_id);
+      /* add it to the instances vector */
+      m_vecInstances.emplace_back(*pcRadio,
+                                  s_anchor,
+                                  c_offset);
+      /* inform the base class about the new entity */
+      AddComponent(*pcRadio);
+      UpdateComponents();
+   }
+
 
    /****************************************/
    /****************************************/
diff --git a/src/plugins/simulator/entities/radio_equipped_entity.h b/src/plugins/simulator/entities/radio_equipped_entity.h
index 5715ee01..a02c7bfb 100644
--- a/src/plugins/simulator/entities/radio_equipped_entity.h
+++ b/src/plugins/simulator/entities/radio_equipped_entity.h
@@ -85,6 +85,13 @@ namespace argos {
                     CRadioMedium& c_medium,
                     Real f_transmit_range);
 
+      void AddRadio(const std::string& str_id,
+                    const CVector3& c_offset,
+                    SAnchor& s_anchor,
+                    CRadioMedium& c_medium,
+                    Real f_transmit_range,
+                    const std::string& str_robot_id);
+
       /**
        * Returns a radio by numeric index.
        * @param un_index The index of the specified radio.
